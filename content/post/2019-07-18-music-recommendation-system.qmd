---
title: Music Artist Recommendation System - EDA
author: Aditya Mangal
date: '2019-07-18'
categories:
  - Projects
tags:
  - DataAnalysis
  - DataScience
  - Visualizations
slug: music-recommendation-system
keywords:
  - tech
summary: Music Artist Recommendation System using the [Last.fm Dataset](https://grouplens.org/datasets/hetrec-2011/).
  Exploratory data analysis.
readingtime: '15'
draft: yes
coverImage: https://lh3.googleusercontent.com/PM_9k2f_aBF6_x5etgQpZzGNcQ6s8YgPVuFiVXqwcKZU3pmy9xsxvZcpb-NFZA7g9xFr38jJSwtiB_AMApLB7YHvK-imvjD31zSAGmRHB5Wk7h593uyZ48OD6suGUhG5B8Mi_hwqw-DLauTIaLSctW5JK9X4-rw2m0WOVf8kQRxG7GggWvyuD8gg0Dyy-AtER3AdMn2jG7upYXYs63MT940AHq826hq36vz2_c99_gUrFGDnnjsN4YnlpDFTYwzyjvglGJjtWzrGYnEZbLNvG9ifYxtzELvXhTtTYKwVAufOi-88g1OtLrddcBgN_izobnCesRnANY4abdcSNs5rkb9_BpYMJGA6_yPAkd1Bte7yDFeMzQ0myZW5MhW9tx5ZXyX5c59nqRpVwRbrrfkQxg2HxhZPjRNeirCe7oWsvcqJnp3rXIIkv74EaD2Hm37A55A1Orj8TXWyfPAA3Ixo-HOiU-uLt2EWQKCWRX6kia8457VlE_OHmnfIBdD7smvL5OVvZv0BNoTmnamiLJL7WvyZftfanwUQmfjiaXyvgBnk3RbROuBsFh6Ep4sVIza18RV_Ftc2EGIlxYH2wxUndUTvGMrnjC-hfIK_sEgCbvQup6-SSYe0iC7w5BvT5IXvmg2eFd99fiRxlVTqr1qfSWpp6AxmcbIEjQHRVaBvqeVn05XcCFO22ZYoFienq6JhyXu5X6TmoI1HA_PXPsDY4iCXfg=w2602-h1734-no
thumbnailImage: https://lh3.googleusercontent.com/4YYTtIHwN3Fo0ZO64A3_vTJd9sPnN-Gt4aC6Ae6D-4Ll3pUIkPy6L_0kzA_b1snFGWvOqlijjnB7q9VhkGsytIHtZquOl9iGZcNizV46_o4p7xUl_wvFT8wW4LAAf6TzkHD_lklURhCujLczN6VZgwtfLmPJgV4AARu-jv3uDAm2lOL1wJLx1fizS_D6Ta7L3dQTUBM5hS6zu5xNrXNTQC1oTNnFhoYSsKkoVmtiZQB-CblkHxWdWk1C7iT80u8GfWpGv91EszIErFxR7_reyzc5ATE3PYcXo_IND77hu8HfVShEDo6zLTknQwZ4sf8QvPcIRWAnd3skB0bXliz-ktFhrxzwJvmf92cmUgGCEVCh6bCF35ABoi5kZv3DXXwFDGVQp_LHzx1bbLRj1o22EeJKCry03tJx8gMB9mP2XBhpnMW9rA0UhneMXweqqUwh7R2JFJhI8C8MmgwMiatV_cxQeZhYvKOFqd9ALGuo9mhdCCdYhXfiYP-DthpwTS427F6LutIap8Ky_yUqy66Anm6x4xOG4pSrKSYMoIF-V9Hbg02clR7DrZrPatY0iNvsiFboP7pw-njBqv_lXMXS_9ca33IiuJ1ZcrHJeA8wLzjh_R9uuoWJjRp8XIoGNEapyLbLLITc9bYChyNiP9bPNldpD2tqMXNC6mY2i2_oe_NsRCoZvr1C_ZVgYCHTH6ufc-e2PcKVHsEYdF2uOKw4F95-VQ=w750-h500-no
thumbnailImagePosition: top
comments: no
coverCaption: Photo by Malte Wingen on Unsplash
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE,error = FALSE)
```


# Introduction

Music Artist Recommendation System using the [Last.fm Dataset](https://grouplens.org/datasets/hetrec-2011/). Exploratory data analysis.

# Analysis

## Load Libraries
```{r}
rm(list = ls())
library(tidyverse)
library(tidylog)
library(lubridate)
library(ggplot2)
library(gridExtra)
library(sunburstR)
library(htmltools)
library(htmlwidgets)

theme_set(theme_light())
```

## Obtain Data

```{r}
artists <- read_tsv("../data/hetrec2011-lastfm-2k/artists.dat")
tags <- read_tsv("../data/hetrec2011-lastfm-2k/tags.dat")
ratings <- read_tsv("../data/hetrec2011-lastfm-2k/user_artists.dat")
friends <- read_tsv("../data/hetrec2011-lastfm-2k/user_friends.dat")
user_tagged_artists <- read_tsv("../data/hetrec2011-lastfm-2k/user_taggedartists.dat")
```

Lets try and join all the data tables, into logical condensed tables.

```{r}
user_tagged_artists %>% 
  left_join(tags, by = c("tagID")) %>% 
  left_join(artists, by = c("artistID" = "id")) -> metadata
```

We will work with the final above 3 dataframes, metadata, ratings and friends. Lets drop the rest of them. 

```{r}
rm(artists, tags, user_tagged_artists)
```

```{r}
metadata %>% 
  glimpse()
```

```{r}
friends %>% 
  glimpse()
```

```{r}
ratings %>% 
  glimpse()
```

## Scrub and Explore

### Ratings

```{r}
ratings %>% 
  head()
```

```{r}
ratings %>% 
  select_if(function(x) any(is.na(x))) %>% 
  summarise_all(funs(sum(is.na(.))))
```


Lets first make userID and artistID as factors.

```{r}
ratings %>% 
  mutate(userID = as.factor(userID),
         artistID = as.factor(artistID)) -> ratings
```

```{r}
ratings %>% 
  summary()
```

```{r fig.width=8}
ratings %>% 
  mutate(z_score_weight = scale(weight)) %>% 
  ggplot() -> p

grid.arrange(p + 
               geom_density(aes(x = weight), fill="#69b3a2", color="#e9ecef", alpha=0.7) +
               labs(x = "weight", y = "density", title = "Weight Density Distribution"), 
             p + 
               geom_density(aes(x = weight), fill="#69b3a2", color="#e9ecef", alpha=0.7)+
               scale_x_log10() + 
               labs(x = "log(weight)", y = "density", title = "log(Weight) Density Distribution"),
             p + 
               geom_density(aes(x = z_score_weight), fill="#69b3a2", color="#e9ecef", alpha=0.7)+
               labs(x = "z-score(weight)", y = "density", title = "z-score(Weight) Density Distribution"),
             p + 
               geom_density(aes(x = z_score_weight), fill="#69b3a2", color="#e9ecef", alpha=0.7)+
               scale_x_log10() + 
               labs(x = "z-score(log(weight))", y = "density", title = "z-score(log(Weight)) Density Distribution"))
```

```{r}
ratings %>% 
  mutate(log_weight = log10(weight),
         z_score_log_weight = scale(log_weight)) %>% 
  summary()
```

Using scaled (i.e. z-score) of log10 of weight field as the rating.

```{r}
ratings %>% 
  mutate(rating = scale(log10(weight))) -> ratings
```

```{r}
ratings %>% 
  count(userID, sort = TRUE)
```

Looks like a highly cleaned dataset, where every user has exactly 50 ratings (or user's play counts of exactly 50 artists).

```{r}
ratings %>% 
  count(artistID, sort = TRUE)
```

### Friends

```{r}
friends %>% 
  glimpse()
```

```{r}
friends %>% 
  select_if(function(x) any(is.na(x))) %>% 
  summarise_all(funs(sum(is.na(.))))
```

```{r}
friends %>% 
  mutate(userID = as.factor(userID),
         friendID = as.factor(friendID)) -> friends
```


```{r}
friends %>% 
  count(userID, sort = TRUE)
```

### Metadata

```{r}
metadata %>% 
  glimpse()
```

```{r}
metadata %>% 
  select_if(function(x) any(is.na(x))) %>% 
  summarise_all(funs(sum(is.na(.))))
```

I'll skip worrying about NA urls and pictureURLs for now. Lets explore the rows where name is NA.

```{r}
metadata %>% 
  filter(is.na(name))
```

```{r}
ratings %>% 
  filter(artistID == 1713)
```

Looks like even though we dont have the name of these artists, we have ratings for them in the ratings dataframe, so we'll keep them. 

```{r}
metadata %>% 
  mutate(userID = as.factor(userID),
         artistID = as.factor(artistID),
         tagID = as.factor(tagID),
         tagValue = as.factor(tagValue),
         name = as.factor(name)) %>% 
  rename(artistName = name) -> metadata
```

I dont think we will need the 2 URL columns for this study, dropping them for now. 

```{r}
metadata %>% 
  select(-url, -pictureURL) -> metadata
```


```{r}
metadata %>% 
  filter(!is.na(artistName)) %>% 
  count(artistName, sort = TRUE) %>% 
  top_n(20, n) %>% 
  mutate(artistName = reorder(artistName, n)) %>%
  ggplot( aes(x=artistName, y=n)) +
  geom_segment( aes(x=artistName, xend=artistName, y=0, yend=n), color="skyblue", size=1) +
  geom_point( color="blue", size=4, alpha=0.6) +
  coord_flip() + 
  theme(panel.grid.minor.y = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position="none") +
  labs(x = "",
       y = "Number of Occurences",
       title = "Most popular Artists",
       subtitle = "Top 20 artists",
       caption = "Based on data from the Last.fm dataset")
```

```{r}
metadata %>% 
  count(tagValue, sort = TRUE) %>% 
  top_n(20, n) %>% 
  mutate(tagValue = reorder(tagValue, n)) %>%
  ggplot( aes(x=tagValue, y=n)) +
  geom_segment( aes(x=tagValue, xend=tagValue, y=0, yend=n), color="skyblue", size=1) +
  geom_point( color="blue", size=4, alpha=0.6) +
  coord_flip() + 
  theme(panel.grid.minor.y = element_blank(),
        panel.grid.major.y = element_blank(),
        legend.position="none") +
  labs(x = "",
       y = "Number of Occurences",
       title = "Most popular Tags",
       subtitle = "Top 20 Tags",
       caption = "Based on data from the Last.fm dataset")
```

Looks like few of the most popular Artists in this dataset are Britney Spears, Lady Gaga and Christina Aguilera and as expected, Rock and Pop are the most popular tags. Lets see which are the most popular artists in the top most popular tags.

```{r}
topTags <- metadata %>% 
  count(tagValue) %>% 
  top_n(5, n) %>% 
  select(tagValue) %>% 
  pull()

metadata %>% 
  filter(tagValue %in% topTags,
         !is.na(artistName)) %>% 
  count(tagValue, artistName, sort = TRUE) %>% 
  group_by(tagValue) %>% 
  top_n(5, n) %>% 
  ungroup() %>% 
  mutate(path = paste(tagValue, artistName, sep = "-")) %>% 
  select(path, n) %>% 
  sunburst(legend = FALSE) -> snb

snb <- htmlwidgets::prependContent(snb, htmltools::h2("Sunburst of most popular artists in 5 most popular tags"))
snb <- htmlwidgets::prependContent(snb, htmltools::h5("Hover over to the see the artists and tags"))
snb
```

Alright, so we know the most popular artists in each popular tag as provided by the user. Don't worry, Beatles is right up there in the "rock" tag! :) 

# Summary

In this post, we   

- Downloaded and merged the dataset
- Analyzed and explored the dataset
- Visualized the most import data points in the dataset.

I think I will wrap up the exploration phase for now. Lets export the data so we can model it in a later post.

```{r}
ratings %>% 
  write_csv("../data/hetrec2011-lastfm-2k/ratings_clean.csv")
friends %>% 
  write_csv("../data/hetrec2011-lastfm-2k/friends_clean.csv")
metadata %>% 
  write_csv("../data/hetrec2011-lastfm-2k/metadata_clean.csv")
```

# References

1. [Data reference](https://grouplens.org/datasets/hetrec-2011/)
2. [Visualization reference](https://www.data-to-viz.com/)

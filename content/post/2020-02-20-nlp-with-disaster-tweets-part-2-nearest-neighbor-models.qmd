---
title: 'NLP with Disaster Tweets: Part 2 Nearest Neighbor Models'
author: Aditya Mangal
date: '2020-02-20'
slug: nlp-with-disaster-tweets-part-2-nearest-neighbor-models
categories:
  - Projects
tags:
  - DataAnalysis
  - DataScience
  - NLP
  - TextMining
keywords:
  - tech
summary: NLP and Tidymodelling in R
readingtime: '15'
draft: no
coverImage: https://lh3.googleusercontent.com/NhQQ6_tTtlSd0SOqdTjXXaaFxEC186pYF68dyx8BJcdeqWUns0kas6nKS7jNUjTorlWCOvYDSXvgTbJSMgHLvc-ViHQkvKe_cGiU4gMP92vb1QSO98BlROygzqVBRO_2pnbPPS3coQVCdbAGJP3PQi0J4hExUkwsxCyPZ7RSOu9kOsIFJ7i7Pi68Ewg8yzEUw7zSb5JyYoDRkunuYedzzrPvS1Z2LWx-T-bVnkedbv72e3fjIfHHpwDf2LM4Tz_orR0lSjyrLt29k8YP2vbGoqRJhOurgj8UxWRC8J1BmDZxaG4fMzF5VfY2QToUTEFUryIzihBzb82z9IBQB7KiBuoKZBvrM03uHBwi_ePO7lt138P5DSufFH3xANhUrY8UPbMIcEKOKaxNXGUhdZG1EDykY6KW5ufjuAgEFoOKUSVp_kHyHmk_qJonukh5zRL07tUhRyXwYNXoP1ixHX-bN8K4yLLobU-Q2kAlrXD89OzMySyD6sm8gu6LcrzwthgEWLwTgRgcpvx0hPncV477w6mZnu1yd8xi8EAE3IVVhWAlQF2oUphPtcWjOBfK-aIocc62MSEFfCPb6DLSBpCWCkFFxydl0KSrbvboXBVX-AM7eVyAnFV3SfSfdQMxtKuLtWbAINTcPhoN05LhQxiOOJtc4KCJFbUOWO29U-rjrunXEbRXPhki1DUCy_KX5phRnwO3hniDAwqubCEZkKU3s6T0yCVT4WARB7E5RcmoVPdLWSRK=w2372-h1832-no
thumbnailImage: https://lh3.googleusercontent.com/-z0Ja7Q6Sb7BXIno6Ycxun1BRzcJ_en9A9EulOKiXX8QAAx_UWYtH8y04Vqu9-YZF9G1zROwyLXxH77yvOKGqlfcCJPpC5S6_0wAEVc7mNLOCq0bmj2r0iE20NP0P_2jvxfZ3TtHAQHvagPsTbe7lbVxhy3-6yEdsAMn4idYDkIbxtgMj5Elo9SeO991NyEDNyj6a31SVlt1U22HnrFhmJMtYvilT30ZCXq3zaC5y7PKMjb1bA605bTRhc0AiDPCUtD8u2AjyrJ0CwaDQ7dzvW-UpeGx-BoJZvveJIPITw7HiofhcCcYoM69W0CDCwDf106GgH8KDRvlnOdlc9AHgqKdwJ38E1Pbxu9enMofV6WsIdx9-a-P0V8UVltiEKu-Iqq0pfnvEVznP3sQlQw6WV1jG2tWrs78xXM4U4Bu2SqOAjQc8rVJaTVh5uOJfon8zxSJ1opZSnzif364UXlZJpsXxouufy6TDEDUxe5c-jI8wEWPNLEy2JeFwjP9FXxm3EnSbRvIUnjtALh2T-ma0Xyd8d7EJQrsE2vziIAK-ZVY6A6qnv9bptefReAq9p5jmBRABp7wFm8NSuPIXdyYneDch1M4V1SSjf4oz7oaP_AuHMuaAKViG65uuw6QoLCNoDsR4Ifq8g4ADUZxp0naty2ElqCkS0Lj3vND0ZcuUMaMUiqUygAcmmInaZMaCqQa-KWRDwgvxL-NCgV1UzXtE81F8nxhcFW481Bjt7fSDQWz8LNm=w750-h579-no
thumbnailImagePosition: left
comments: yes
coverCaption: Photo by Marcus Kauffman on Unsplash
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE,error = FALSE)
```
# Introduction

In this [NLP getting started challenge](https://www.kaggle.com/c/nlp-getting-started){target="_blank"} on kaggle, we are given tweets which are classified as 1 if they are about real disasters and 0 if not. The goal is to predict given the text of the tweets and some other metadata about the tweet, if its about a real disaster or not.   
In this part 2 for Nearest Neighbor Modelling, I will use the processed data generated in [Part 1](/2020/02/nlp-with-disaster-tweets-part-1/){target="_blank"} to train nearest neighbor models in order to predict if a tweet is about a real disaster or not using the tidymodels framework. 

# Analysis

## Load Libraries

```{r}
rm(list = ls())
library(tidyverse)
library(ggplot2)
library(tidymodels)
library(silgelib)

theme_set(theme_plex())
```

## Loading processed data from previous part

```{r}
tweets <- readRDS("../data/nlp_with_disaster_tweets/tweets_proc.rds")
tweets_final <- readRDS("../data/nlp_with_disaster_tweets/tweets_test_proc.rds")
```

```{r}
tweets %>% 
  dim

tweets_final %>% 
  dim
```


## Feature preprocessing and engineering

```{r}
tweets %>% 
  mutate(target = as.factor(target),
         id = as.character(id)) -> tweets
```


```{r}
tweets %>% 
  count(target, sort = T)
```

### Split data

Splitting the data into 3 sets. A test set of 10% data, a cross validation set of 20% data and a training set of 70% data. Training and validation sets will be used for training, tuning and validating performance of models and comparing among them. Test set will only be used for final estimation of the model performance on unknown data. 

```{r}
set.seed(42)
tweets_split <- initial_split(tweets, prop = 0.1, strata = target)

tweets_test <- training(tweets_split)
tweets_train_cv <- testing(tweets_split)

set.seed(42)
tweets_split <- initial_split(tweets_train_cv, prop = 7/9, strata = target)
tweets_train <- training(tweets_split)
tweets_cv <- testing(tweets_split)
```

```{r}
dim(tweets_train)
dim(tweets_cv)
dim(tweets_test)
```


### Preparation Recipe

I will use the recipe package from tidymodels to generate a recipe for data preprocessing and feature engineering. 

```{r}
recipe(target ~ ., data = tweets_train) %>% 
  update_role(id, new_role = "ID") %>% 
  step_rm(location, keyword) %>% 
  step_mutate(len = str_length(text),
              num_hashtags = str_count(text, "#")) %>% 
  step_rm(text) %>% 
  step_zv(all_numeric(), -all_outcomes()) %>% 
  step_normalize(all_numeric(), -all_outcomes())  %>% 
  step_pca(all_predictors(), -len, -num_hashtags, threshold = 0.80)-> tweets_recipe
```

Note above 

 - We use the training dataset to create the recipe  
 - We won't use 'id' field as a predictor, only as an identifier.  
 - For current analysis, we will drop the location and keyword features.   
 - Creating a length feature to model the tweet length and another feature to store the number of hashtags in the tweet.  
 - Getting rid of the text field since we have generated all the features from it that we wanted for now.   
 - Removing all predictors with zero variance.   
 - Normalizing all features i.e. centering and scaling.  
 - Adding dimensionality reduction using PCA to keep 80% variance and reduce the number of features while still keeping our custom features.

```{r}
tweets_prep <- tweets_recipe %>% 
  prep(training = tweets_train, 
       strings_as_factors = FALSE)
```

## Modelling

### Baseline model

I will first create a baseline model to beat. In this case, we can predict randomly in the ratio of target counts and evaluate the model performance accordingly. 

```{r}
tweets_prep %>% 
  juice() %>% 
  count(target) %>% 
  mutate(prob = n/sum(n)) %>% 
  pull(prob) -> probs
```

```{r}
set.seed(42)
tweets_prep %>% 
  bake(new_data = tweets_cv) %>% 
  mutate(predicted_target = as.factor(sample(0:1, 
                                             size = nrow(tweets_cv), 
                                             prob = probs, replace = T))) %>% 
  accuracy(target, predicted_target)
```

```{r}
set.seed(42)
tweets_prep %>% 
  bake(new_data = tweets_cv) %>% 
  mutate(predicted_target = as.factor(sample(0:1, 
                                             size = nrow(tweets_cv), 
                                             prob = probs, replace = T))) %>% 
  f_meas(target, predicted_target)
```

Like, we see above, we have a baseline f1 score of 0.5812. We need to build and train a model that beats this baseline. 

```{r}
set.seed(42)
tweets_prep %>% 
  bake(new_data = tweets_test) %>% 
  mutate(predicted_target = as.factor(sample(0:1, 
                                             size = nrow(tweets_test), 
                                             prob = probs, replace = T))) %>% 
  accuracy(target, predicted_target)
```

```{r}
set.seed(42)
tweets_prep %>% 
  bake(new_data = tweets_test) %>% 
  mutate(predicted_target = as.factor(sample(0:1, 
                                             size = nrow(tweets_test), 
                                             prob = probs, replace = T))) %>% 
  f_meas(target, predicted_target)
```

*Generating submission file*

```{r eval=FALSE}
set.seed(42)
tweets_prep %>% 
  bake(new_data = tweets_final) %>% 
  mutate(target = as.factor(sample(0:1, 
                                   size = nrow(tweets_final), 
                                   prob = probs, replace = T))) %>% 
  select(id, target) %>% 
  write_csv("../data/nlp_with_disaster_tweets/submissions/baseline_cvf_57_testf_57.csv")
```

### K-Nearest Neighbor model

Let's build a basic KNN model with some default number of neighbors to see how the modelling is done in this framework and checkout how the modelling output looks like. 

#### Basic

```{r}
knn_spec <- nearest_neighbor(neighbors = 3) %>% 
  set_engine("kknn") %>% 
  set_mode("classification")

wf <- workflow() %>% 
  add_recipe(tweets_recipe)
```


```{r eval=FALSE}
knn_fit <- wf %>% 
  add_model(knn_spec) %>% 
  fit(data = tweets_train)

saveRDS(knn_fit, "../data/nlp_with_disaster_tweets/knn/knn_basic_fit.rds")
```

```{r}
knn_fit <- readRDS("../data/nlp_with_disaster_tweets/knn/knn_basic_fit.rds")
knn_fit %>% 
  pull_workflow_fit() -> wf_fit

wf_fit$fit$MISCLASS
```

The above shows a simple K-nearest neighbors model using the "kknn" engine. Gives about `r as.numeric(wf_fit$fit$MISCLASS)` of minimal misclassification. 
Let's try and tune the number of neighbors (k) and see if we can interpret the underlying problem space. 

#### Tuning number of neighbors

Using 5-fold cross validation and values of K going from 1 to 100. 

```{r}
set.seed(1234)
folds <- vfold_cv(tweets_train, strata = target, v = 5, repeats = 1)

tune_spec <- nearest_neighbor(neighbors = tune()) %>% 
  set_mode("classification") %>% 
  set_engine("kknn")

neighbor_grid <- expand.grid(neighbors = seq(1,100, by = 1))
```

```{r eval=FALSE}
set.seed(1234)
doParallel::registerDoParallel(cores = parallel::detectCores(logical = FALSE))


knn_grid <- tune_grid(
  wf %>% add_model(tune_spec),
  resamples = folds,
  grid = neighbor_grid,
  metrics = metric_set(accuracy, roc_auc, f_meas),
  control = control_grid(save_pred = TRUE,
                           verbose = TRUE)
)

saveRDS(knn_grid, "../data/nlp_with_disaster_tweets/knn/knn_grid.rds")
```

```{r}
knn_grid <- readRDS("../data/nlp_with_disaster_tweets/knn/knn_grid.rds")

knn_grid %>% 
  collect_metrics()
```

```{r}
knn_grid %>% 
  collect_metrics() %>% 
  mutate(flexibility = 1/neighbors,
         .metric = str_to_title(str_replace_all(.metric, "_", " "))) %>% 
  ggplot(aes(flexibility, mean, color = .metric)) + 
  geom_errorbar(aes(ymin = mean - std_err,
                    ymax = mean + std_err), alpha = 0.5) + 
  geom_line(size = 1.5) + 
  facet_wrap(~.metric, scales = "free", nrow = 3) + 
  scale_x_log10() + 
  theme(legend.position = "none") + 
  labs(title = "Model performance against model flexibility",
       subtitle = "F1-score peaks around lower flexibility values",
       x = "Model flexibility i.e. Log(1/NumberOfNeighbors)",
       y = "Mean metric value")
```

As we see in the plot above, the f1-score increases on the evaluation set until around K=20 and then starts falling down. We plot the flexibility (i.e. 1/NumberOfNeighbors) to visualize how the model performance varies as the model flexibility increases. The KNN model with K=1 will be highly flexible and thus have high variance, whereas K=100 would lead to a much stricter model which is less flexible and might suffer from bias.  
Looks like our underlying problem stays much closer to being flexible than strict (since optimal K looks to be around 20). We should remember this fact for picking further models for experimentation. 


Let's pickout the best parameter K based on the highest f1-score and train our final model on the full training dataset and evaluate against cross validation dataset. 

```{r}
knn_grid %>% 
  select_best("f_meas") -> highest_f_meas

final_knn <- finalize_workflow(
  wf %>% add_model(tune_spec),
  highest_f_meas
)
```

```{r eval=FALSE}
last_fit(final_knn, 
         tweets_split,
         metrics = metric_set(accuracy, roc_auc, f_meas)) -> knn_last_fit

saveRDS(knn_last_fit, "../data/nlp_with_disaster_tweets/knn/knn_last_fit.rds")
```
```{r}
knn_last_fit <- readRDS("../data/nlp_with_disaster_tweets/knn/knn_last_fit.rds")
knn_last_fit %>% 
  collect_metrics()
```

Our final fit knn model with K=`r highest_f_meas %>% pull()` gives an f1-score of `r knn_last_fit %>% collect_metrics() %>% filter(.metric == "f_meas") %>% pull()`, which is much higher than our baseline model on the same CV dataset.   

# Summary

We can hence learn quite a few things about our underlying problem space by using this basic modelling algorithm K-nearest neighbors and use our learning in further model selection and tuning and also generate a fairly robust model that predicts quite effectively as compared to the baseline model.   
Also, this tidymodels framework provides a good modelling structure which can be easily reproduced and used to train a variety of models. In the next part of this series, I will work on another classic modelling algorithm, Lasso Regression, where we will also see if we can identify if there any of these features are much more important than the others and if our 2 custom features are useful.  

# References

 - Project Summary Page - [NLP with disaster tweets: Summary](/2020/02/nlp-with-disaster-tweets/){target="_blank"}
 - Project Part 1 - [NLP with Disaster Tweets: Part 1 Data Preparation](/2020/02/nlp-with-disaster-tweets-part-1/){target="_blank"}
 - Lasso Regression using [Tidymodels by Julia Silge](https://juliasilge.com/blog/lasso-the-office/){target="_blank"}.
 - Introduction to Statistical Learning - [Book](https://www.amazon.com/Introduction-Statistical-Learning-Applications-Statistics/dp/1461471370){target="_blank"} 